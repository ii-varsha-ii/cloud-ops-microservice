# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vpc_pb2 as vpc__pb2


class VpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVpcWithSubnets = channel.unary_unary(
                '/VpcService/CreateVpcWithSubnets',
                request_serializer=vpc__pb2.CreateVpcRequest.SerializeToString,
                response_deserializer=vpc__pb2.Vpc.FromString,
                )
        self.GetVpcBasedOnRegion = channel.unary_unary(
                '/VpcService/GetVpcBasedOnRegion',
                request_serializer=vpc__pb2.RegionAndVpcRequest.SerializeToString,
                response_deserializer=vpc__pb2.ListOfVpcs.FromString,
                )
        self.GetSubnetsInVpc = channel.unary_unary(
                '/VpcService/GetSubnetsInVpc',
                request_serializer=vpc__pb2.RegionAndVpcRequest.SerializeToString,
                response_deserializer=vpc__pb2.ListOfSubnets.FromString,
                )
        self.CreateSubnet = channel.unary_unary(
                '/VpcService/CreateSubnet',
                request_serializer=vpc__pb2.CreateSubnetRequest.SerializeToString,
                response_deserializer=vpc__pb2.Subnet.FromString,
                )


class VpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateVpcWithSubnets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVpcBasedOnRegion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubnetsInVpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateVpcWithSubnets': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVpcWithSubnets,
                    request_deserializer=vpc__pb2.CreateVpcRequest.FromString,
                    response_serializer=vpc__pb2.Vpc.SerializeToString,
            ),
            'GetVpcBasedOnRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVpcBasedOnRegion,
                    request_deserializer=vpc__pb2.RegionAndVpcRequest.FromString,
                    response_serializer=vpc__pb2.ListOfVpcs.SerializeToString,
            ),
            'GetSubnetsInVpc': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubnetsInVpc,
                    request_deserializer=vpc__pb2.RegionAndVpcRequest.FromString,
                    response_serializer=vpc__pb2.ListOfSubnets.SerializeToString,
            ),
            'CreateSubnet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubnet,
                    request_deserializer=vpc__pb2.CreateSubnetRequest.FromString,
                    response_serializer=vpc__pb2.Subnet.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateVpcWithSubnets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VpcService/CreateVpcWithSubnets',
            vpc__pb2.CreateVpcRequest.SerializeToString,
            vpc__pb2.Vpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVpcBasedOnRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VpcService/GetVpcBasedOnRegion',
            vpc__pb2.RegionAndVpcRequest.SerializeToString,
            vpc__pb2.ListOfVpcs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubnetsInVpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VpcService/GetSubnetsInVpc',
            vpc__pb2.RegionAndVpcRequest.SerializeToString,
            vpc__pb2.ListOfSubnets.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSubnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VpcService/CreateSubnet',
            vpc__pb2.CreateSubnetRequest.SerializeToString,
            vpc__pb2.Subnet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
